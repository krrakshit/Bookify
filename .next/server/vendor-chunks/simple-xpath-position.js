/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/simple-xpath-position";
exports.ids = ["vendor-chunks/simple-xpath-position"];
exports.modules = {

/***/ "(ssr)/./node_modules/simple-xpath-position/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/simple-xpath-position/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/xpath */ \"(ssr)/./node_modules/simple-xpath-position/lib/xpath.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlLXhwYXRoLXBvc2l0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGtIQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jvb2std2Vic2l0ZS1uZXh0anMvLi9ub2RlX21vZHVsZXMvc2ltcGxlLXhwYXRoLXBvc2l0aW9uL2luZGV4LmpzPzY3MmEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi94cGF0aCcpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-xpath-position/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/simple-xpath-position/lib/dom-exception.js":
/*!*****************************************************************!*\
  !*** ./node_modules/simple-xpath-position/lib/dom-exception.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DOMException = function DOMException(message, name) {\n  _classCallCheck(this, DOMException);\n\n  this.message = message;\n  this.name = name;\n  this.stack = new Error().stack;\n};\n\nexports[\"default\"] = DOMException;\n\n\nDOMException.prototype = new Error();\n\nDOMException.prototype.toString = function () {\n  return this.name + \": \" + this.message;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kb20tZXhjZXB0aW9uLmpzIl0sIm5hbWVzIjpbIkRPTUV4Y2VwdGlvbiIsIm1lc3NhZ2UiLCJuYW1lIiwic3RhY2siLCJFcnJvciIsInByb3RvdHlwZSIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7SUFBcUJBLFksR0FDbkIsc0JBQVlDLE9BQVosRUFBcUJDLElBQXJCLEVBQTJCO0FBQUE7O0FBQ3pCLE9BQUtELE9BQUwsR0FBZUEsT0FBZjtBQUNBLE9BQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNBLE9BQUtDLEtBQUwsR0FBYyxJQUFJQyxLQUFKLEVBQUQsQ0FBY0QsS0FBM0I7QUFDRCxDOztxQkFMa0JILFk7OztBQVFyQkEsYUFBYUssU0FBYixHQUF5QixJQUFJRCxLQUFKLEVBQXpCOztBQUVBSixhQUFhSyxTQUFiLENBQXVCQyxRQUF2QixHQUFrQyxZQUFZO0FBQzVDLFNBQVUsS0FBS0osSUFBZixVQUF3QixLQUFLRCxPQUE3QjtBQUNELENBRkQiLCJmaWxlIjoiZG9tLWV4Y2VwdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrXG4gIH1cbn1cblxuRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpXG5cbkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBgJHt0aGlzLm5hbWV9OiAke3RoaXMubWVzc2FnZX1gXG59XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlLXhwYXRoLXBvc2l0aW9uL2xpYi9kb20tZXhjZXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQjs7QUFFbEIsa0RBQWtELDBDQUEwQzs7QUFFNUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7OztBQUdsQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ib29rLXdlYnNpdGUtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3NpbXBsZS14cGF0aC1wb3NpdGlvbi9saWIvZG9tLWV4Y2VwdGlvbi5qcz9jYjk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24gRE9NRXhjZXB0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERPTUV4Y2VwdGlvbik7XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xufTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBET01FeGNlcHRpb247XG5cblxuRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5ET01FeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5tZXNzYWdlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OWtiMjB0WlhoalpYQjBhVzl1TG1weklsMHNJbTVoYldWeklqcGJJa1JQVFVWNFkyVndkR2x2YmlJc0ltMWxjM05oWjJVaUxDSnVZVzFsSWl3aWMzUmhZMnNpTENKRmNuSnZjaUlzSW5CeWIzUnZkSGx3WlNJc0luUnZVM1J5YVc1bklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdTVUZCY1VKQkxGa3NSMEZEYmtJc2MwSkJRVmxETEU5QlFWb3NSVUZCY1VKRExFbEJRWEpDTEVWQlFUSkNPMEZCUVVFN08wRkJRM3BDTEU5QlFVdEVMRTlCUVV3c1IwRkJaVUVzVDBGQlpqdEJRVU5CTEU5QlFVdERMRWxCUVV3c1IwRkJXVUVzU1VGQldqdEJRVU5CTEU5QlFVdERMRXRCUVV3c1IwRkJZeXhKUVVGSlF5eExRVUZLTEVWQlFVUXNRMEZCWTBRc1MwRkJNMEk3UVVGRFJDeERPenR4UWtGTWEwSklMRms3T3p0QlFWRnlRa0VzWVVGQllVc3NVMEZCWWl4SFFVRjVRaXhKUVVGSlJDeExRVUZLTEVWQlFYcENPenRCUVVWQlNpeGhRVUZoU3l4VFFVRmlMRU5CUVhWQ1F5eFJRVUYyUWl4SFFVRnJReXhaUVVGWk8wRkJRelZETEZOQlFWVXNTMEZCUzBvc1NVRkJaaXhWUVVGM1FpeExRVUZMUkN4UFFVRTNRanRCUVVORUxFTkJSa1FpTENKbWFXeGxJam9pWkc5dExXVjRZMlZ3ZEdsdmJpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFUlBUVVY0WTJWd2RHbHZiaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLRzFsYzNOaFoyVXNJRzVoYldVcElIdGNiaUFnSUNCMGFHbHpMbTFsYzNOaFoyVWdQU0J0WlhOellXZGxYRzRnSUNBZ2RHaHBjeTV1WVcxbElEMGdibUZ0WlZ4dUlDQWdJSFJvYVhNdWMzUmhZMnNnUFNBb2JtVjNJRVZ5Y205eUtDa3BMbk4wWVdOclhHNGdJSDFjYm4xY2JseHVSRTlOUlhoalpYQjBhVzl1TG5CeWIzUnZkSGx3WlNBOUlHNWxkeUJGY25KdmNpZ3BYRzVjYmtSUFRVVjRZMlZ3ZEdsdmJpNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSEpsZEhWeWJpQmdKSHQwYUdsekxtNWhiV1Y5T2lBa2UzUm9hWE11YldWemMyRm5aWDFnWEc1OVhHNGlYWDA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-xpath-position/lib/dom-exception.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/simple-xpath-position/lib/xpath.js":
/*!*********************************************************!*\
  !*** ./node_modules/simple-xpath-position/lib/xpath.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.fromNode = fromNode;\nexports.toNode = toNode;\n\nvar _getDocument = __webpack_require__(/*! get-document */ \"(ssr)/./node_modules/get-document/index.js\");\n\nvar _getDocument2 = _interopRequireDefault(_getDocument);\n\nvar _domException = __webpack_require__(/*! ./dom-exception */ \"(ssr)/./node_modules/simple-xpath-position/lib/dom-exception.js\");\n\nvar _domException2 = _interopRequireDefault(_domException);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// https://developer.mozilla.org/en-US/docs/XPathResult\nvar FIRST_ORDERED_NODE_TYPE = 9;\n\n// Default namespace for XHTML documents\nvar HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n\n/**\n * Compute an XPath expression for the given node.\n *\n * If the optional parameter `root` is supplied, the computed XPath expression\n * will be relative to it. Otherwise, the root element is the root of the\n * document to which `node` belongs.\n *\n * @param {Node} node The node for which to compute an XPath expression.\n * @param {Node} [root] The root context for the XPath expression.\n * @returns {string}\n */\nfunction fromNode(node) {\n  var root = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n  if (node === undefined) {\n    throw new Error('missing required parameter \"node\"');\n  }\n\n  root = root || (0, _getDocument2['default'])(node);\n\n  var path = '/';\n  while (node !== root) {\n    if (!node) {\n      var message = 'The supplied node is not contained by the root node.';\n      var name = 'InvalidNodeTypeError';\n      throw new _domException2['default'](message, name);\n    }\n    path = '/' + nodeName(node) + '[' + nodePosition(node) + ']' + path;\n    node = node.parentNode;\n  }\n  return path.replace(/\\/$/, '');\n}\n\n/**\n * Find a node using an XPath relative to the given root node.\n *\n * The XPath expressions are evaluated relative to the Node argument `root`.\n *\n * If the optional parameter `resolver` is supplied, it will be used to resolve\n * any namespaces within the XPath.\n *\n * @param {string} path An XPath String to evaluate.\n * @param {Node} root The root context for the XPath expression.\n * @returns {Node|null} The first matching Node or null if none is found.\n */\nfunction toNode(path, root) {\n  var resolver = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  if (path === undefined) {\n    throw new Error('missing required parameter \"path\"');\n  }\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n\n  // Make the path relative to the root, if not the document.\n  var document = (0, _getDocument2['default'])(root);\n  if (root !== document) path = path.replace(/^\\//, './');\n\n  // Make a default resolver.\n  var documentElement = document.documentElement;\n  if (resolver === null && documentElement.lookupNamespaceURI) {\n    (function () {\n      var defaultNS = documentElement.lookupNamespaceURI(null) || HTML_NAMESPACE;\n      resolver = function resolver(prefix) {\n        var ns = { '_default_': defaultNS };\n        return ns[prefix] || documentElement.lookupNamespaceURI(prefix);\n      };\n    })();\n  }\n\n  return resolve(path, root, resolver);\n}\n\n// Get the XPath node name.\nfunction nodeName(node) {\n  switch (node.nodeName) {\n    case '#text':\n      return 'text()';\n    case '#comment':\n      return 'comment()';\n    case '#cdata-section':\n      return 'cdata-section()';\n    default:\n      return node.nodeName.toLowerCase();\n  }\n}\n\n// Get the ordinal position of this node among its siblings of the same name.\nfunction nodePosition(node) {\n  var name = node.nodeName;\n  var position = 1;\n  while (node = node.previousSibling) {\n    if (node.nodeName === name) position += 1;\n  }\n  return position;\n}\n\n// Find a single node with XPath `path`\nfunction resolve(path, root, resolver) {\n  try {\n    // Add a default value to each path part lacking a prefix.\n    var nspath = path.replace(/\\/(?!\\.)([^\\/:\\(]+)(?=\\/|$)/g, '/_default_:$1');\n    return platformResolve(nspath, root, resolver);\n  } catch (err) {\n    return fallbackResolve(path, root);\n  }\n}\n\n// Find a single node with XPath `path` using the simple, built-in evaluator.\nfunction fallbackResolve(path, root) {\n  var steps = path.split(\"/\");\n  var node = root;\n  while (node) {\n    var step = steps.shift();\n    if (step === undefined) break;\n    if (step === '.') continue;\n\n    var _step$split = step.split(/[\\[\\]]/);\n\n    var name = _step$split[0];\n    var position = _step$split[1];\n\n    name = name.replace('_default_:', '');\n    position = position ? parseInt(position) : 1;\n    node = findChild(node, name, position);\n  }\n  return node;\n}\n\n// Find a single node with XPath `path` using `document.evaluate`.\nfunction platformResolve(path, root, resolver) {\n  var document = (0, _getDocument2['default'])(root);\n  var r = document.evaluate(path, root, resolver, FIRST_ORDERED_NODE_TYPE, null);\n  return r.singleNodeValue;\n}\n\n// Find the child of the given node by name and ordinal position.\nfunction findChild(node, name, position) {\n  for (node = node.firstChild; node; node = node.nextSibling) {\n    if (nodeName(node) === name && --position === 0) break;\n  }\n  return node;\n}\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-xpath-position/lib/xpath.js\n");

/***/ })

};
;